[manifest]
version = "1.0.0"
dump_lua = true
priority = 1

[[patches]]
[patches.pattern]
target = "game.lua"
pattern = "play_sound('whoosh1', 0.4, 0.8)"
position = "before"
payload = "play_sound(togabalatro and not togabalatro.has_tried_startup and togabalatro.config.StartUpSound and 'toga_w96', 1, 0.3);if togabalatro then togabalatro.has_tried_startup = true end"
match_indent = true

[[patches]]
[patches.pattern]
target = "functions/state_events.lua"
pattern = "check_for_unlock({type = 'run_card_replays'})"
position = "before"
payload = "if togabalatro then togabalatro.playextracards() end"
match_indent = true

[[patches]]
[patches.pattern]
target = '=[SMODS MoreFluff "MoreFluff.lua"]'
pattern = "G.do_colour_end_of_round_stuff = false"
position = "before"
payload = '''
if next(SMODS.find_card('j_toga_displayproperties')) and togabalatro.mf_colours_held() then
	for i = 1, #SMODS.find_card('j_toga_displayproperties') do
		card_eval_status_text(SMODS.find_card('j_toga_displayproperties')[i], 'extra', nil, nil, nil, {message = localize('toga_colourful'), sound = togabalatro.config.SFXWhenTriggered and 'toga_winxpinfobar'})
		colour_end_of_round_effects()
	end
end
'''
match_indent = true

# These feel a bit destructive because they are.
[[patches]]
[patches.pattern]
target = '=[SMODS _ "src/utils.lua"]'
pattern = "for _, card in ipairs(context.cardarea.cards) do"
position = "before"
payload = "local curcards = togabalatro.preprocess(context.cardarea.cards)"
match_indent = true

[[patches]]
[patches.pattern]
target = '=[SMODS _ "src/utils.lua"]'
pattern = "for _, card in ipairs(context.cardarea.cards) do"
position = "at"
payload = "for _, card in ipairs(curcards) do"
overwrite = true
match_indent = true

[[patches]]
[patches.pattern]
target = '=[SMODS _ "src/utils.lua"]'
pattern = "for i, card in ipairs(context.cardarea.cards) do"
position = "before"
payload = "local curcards = togabalatro.preprocess(context.cardarea.cards)"
match_indent = true

[[patches]]
[patches.pattern]
target = '=[SMODS _ "src/utils.lua"]'
pattern = "for i, card in ipairs(context.cardarea.cards) do"
position = "at"
payload = "for i, card in ipairs(curcards) do"
overwrite = true
match_indent = true